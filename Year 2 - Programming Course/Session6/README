This solution consists totally of five different simulations (most of them inspired by the ideas in the tutorial and changed in different aspects by me).

First, I stole the worked solution of the first task from the course website and made sure that I understand it and played a lot with the situation of N particles in one dimensional box, but I excluded this task from my goals as it has already been done.

My first simulation is of a piston, which splits the "volume" of the one dimensional box into two parts with N1 identical particles on one side of the piston and N2 on the other. The particles having the same mass represents the presence of only a single type of gas (e.g. Hydrogen). The mass of the piston is taken to be 1000 times larger than the mass of a single particle which is not very close to a real world example but in the real world the number of particles on each side of the piston is also much larger than in our case where we take a few dozens of particles at most. So the two effects cancel out and we have a good approximation of a one dimensional gas and piston. In order to make the simulation more interesting I decided to give the particles random positions and velocities every time. The simulation is produced by the function pistonSimulation which takes as arguments N1, N2, piston_position and piston_velocity. This allows us to examine many different situations and points of view. For example, if we choose the initial velocity of the piston to be zero, its initial position is very unlikely to be the equilibrium and we can observe the piston oscillating (we plot the position of the piston as function of time, using the gnuplot command in pistonSimulation-MyGnu1). Then we can start changing the initial velocity and see how it affects the period of oscillation. It turns out that it really affects it, mainly because the frequency of the natural oscillations is very low and even small initial velocity is enough to make the piston reach its furthest point much faster. We can also create very beautiful plots if we plot the position as function of time for the piston and just the two particles which make contact with its sides. We can also check that the energy of the system stays constant as it should.

My second simulation is almost identical to the first one with the only difference that this time the masses of the particles are not all the same but are chosen randomly. This simulation is produced by the function pistonSimulation2. As a consequence we get similar results to the first simulation only slightly more randomized in terms of the equilibrium position. We can plot these using the gnuplot command file pistonSimulation2-MyGnu2.

My third simulation was inspired by the third task in the tutorial. It is produced by the function tenParticles and as its name suggests it simulates ten particles with variety of masses spanning a range of a factor of 4 in magnitude (actually it is not exactly 4 but rather between 4 and 5 as eight of the particles are given randomly generated masses every time but this does not effect the final result). Eight of the masses are randomly chosen while the other two (the second and the sixth) are set to be 1 and 4, in order to get their ratio exactly 1:4 as suggested in the tutorial. The initial velocity of each particle is also chosen at random. The simulation runs for T=1000. Then we can plot histograms of the velocities of the two particles using the gnuplot command file tenParticles-MyGnu3. The resultant histograms show Gaussian-like distributions with mean zero. The histogram corresponding to the lighter particle is approximately 2 times wider than that corresponding to the heavier particle (which reminds us very of sqrt(ratio)). The histograms of the positions of the two particles show similar (but skew) shapes but with mean values corresponding approximately to the initial position of each particle. 

My fourth simulation was inspired by the fourth task in the tutorial. It is produced by the function movingWall and again as its name suggests it simulates a situation in which the right-hand wall moves at constant speed towards or away from the other wall. It did not require almost any additional programming work to be done as only the velocity of one of the walls had to be put as an argument of the function. The most interesting plot which can be produced with this simulation is that of the energy of the system as function of time. Clearly, if the walls are getting closer together, this corresponds to work being done on the gas and as a result the energy of the system must increase. And respectively if the walls are getting away from each other the energy must decrease. These two cases can be easily checked by setting the velocity of the right-hand wall once to be positive and once to be negative. The two plots, which can be generated with the gnuplot command file movingWall-MyGnu4, show exponential growth and respectively fall of the energy of the system.

My fifth and final simulation was designed by me and deals with a situation in which we have two pistons in one dimensional cylinder. It is produced by the function twoPistons. Care had to be taken while distributing the particles in the three regions defined by the pistons because the indices could have easily gone wrong. I have not derived any physical properties for this system which I would want to test (as I consider it too complicated). I would rather observe the behaviour of the system and just enjoy the beauty of the simulation. Plot of the positions of the two pistons as function of time can be generated with the gnuplot command file twoPistons-MyGnu5.

I spent quite a lot of time doing this SESSION and I learnt a lot while playing with different situations and initial conditions. I found it educational and enjoying in the same time.

My solution was in a file called MyBonkers.cc and the gnuplot command files for the individual simulations were in files called pistonSimulation-MyGnu1, pistonSimulation2-MyGnu2, tenParticles-MyGnu3, movingWall-MyGnu4, twoPistons-MyGnu5.
